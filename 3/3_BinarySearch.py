'''
На каждом шаге сужается диапазон поиска. Правая граница сдвигается влево, либо
левая — вправо. При реализации обязательно нужно удостовериться, что границы
действительно уменьшаются при любом наборе параметров, иначе рекурсия может
уйти в бесконечный цикл:
в нашем случае всегда mid < right, поэтому [left, mid) меньше по длине, чем
[left, right);
кроме того, left < mid + 1 (хотя mid может оказаться равным left), поэтому
[mid + 1, right) меньше по длине, чем [left, right).
В какой-то момент левая граница может стать равной правой, такой полуоткрытый
интервал не содержит элементов. Можно сделать вывод, что искомого элемента в
массиве нет и вернуть –1. Это будет базовым случаем рекурсии.
Второй базовый случай реализуется, если элемент на позиции mid оказался
искомым. Этот случай мы обсудили ранее.
'''


def binary_search(arr, x, left, right):
    if right <= left:  # промежуток пуст
        return -1
    # промежуток не пуст
    mid = (left + right) // 2
    if arr[mid] == x:  # центральный элемент — искомый
        return mid
    elif x < arr[mid]:  # искомый элемент меньше центрального
        # значит следует искать в левой половине
        return binary_search(arr, x, left, mid)
    else:  # иначе следует искать в правой половине
        return binary_search(arr, x, mid + 1, right)


'''
# изначально мы запускаем двоичный поиск на всей длине массива
index = binarySearch(arr, x, left = 0, right = len(arr))
Отлично, наша функция готова!
А если массив отсортирован по убыванию?
Этот алгоритм можно легко модифицировать для поиска в массиве, отсортированном
по убыванию. В этом случае, если центральный элемент меньше искомого, нужно
продолжать поиск в левой части. А если больше — в правой.
'''


def binary_search_descending(arr, x, left, right):
    if right <= left:
        return -1
    mid = (left + right) // 2
    if arr[mid] == x:
        return mid
    elif arr[mid] < x:  # искомый элемент больше центрального
        # на этот раз все элементы больше центрального
        # располагаются в левой половине
        return binary_search_descending(arr, x, left, mid)
    else:
        return binary_search_descending(arr, x, mid + 1, right)
